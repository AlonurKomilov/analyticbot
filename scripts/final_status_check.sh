#!/bin/bash

# Final Status Check: Do we need a rebuild?
# Comprehensive check of the mock/real separation implementation

echo "üîç Final Status Check: Mock/Real Separation"
echo "=========================================="

# Check critical files exist and have content
echo ""
echo "üìÅ Critical Files Check:"

check_file() {
    local file=$1
    local description=$2
    if [ -f "$file" ] && [ -s "$file" ]; then
        echo "‚úÖ $description: $file"
        return 0
    else
        echo "‚ùå $description: $file (missing or empty)"
        return 1
    fi
}

MISSING_FILES=0

check_file "apps/frontend/src/hooks/useDataSource.js" "React Hooks System" || ((MISSING_FILES++))
check_file "apps/frontend/src/services/mockService.js" "Mock Service" || ((MISSING_FILES++))
check_file "apps/frontend/src/services/dataService.js" "Data Service Factory" || ((MISSING_FILES++))
check_file "apps/frontend/src/utils/dataSourceManager.js" "Data Source Manager" || ((MISSING_FILES++))
check_file "apps/frontend/src/config/mockConfig.js" "Configuration System" || ((MISSING_FILES++))

# Check migrated components
echo ""
echo "üîß Migrated Components Check:"
check_file "apps/frontend/src/components/analytics/ModernAdvancedAnalyticsDashboard.jsx" "Modern Dashboard" || ((MISSING_FILES++))
check_file "apps/frontend/src/components/demo/AnalyticsAdapterDemo.jsx" "Demo Component" || ((MISSING_FILES++))

# Check backend adapters
echo ""
echo "‚öôÔ∏è Backend Adapters Check:"
check_file "apps/bot/services/adapters/analytics_adapter_factory.py" "Analytics Factory" || ((MISSING_FILES++))
check_file "apps/bot/services/adapters/payment_adapter_factory.py" "Payment Factory" || ((MISSING_FILES++))

# Check documentation
echo ""
echo "üìö Documentation Check:"
check_file "MOCK_REAL_SYSTEM_DOCUMENTATION.md" "System Documentation" || ((MISSING_FILES++))
check_file "ACTUAL_SEPARATION_COMPLETE.md" "Completion Report" || ((MISSING_FILES++))

# Test syntax of critical files
echo ""
echo "üîç Syntax Validation:"
SYNTAX_ERRORS=0

test_syntax() {
    local file=$1
    local description=$2
    if node -c "$file" 2>/dev/null; then
        echo "‚úÖ Syntax OK: $description"
        return 0
    else
        echo "‚ùå Syntax Error: $description ($file)"
        return 1
    fi
}

test_syntax "apps/frontend/src/services/mockService.js" "Mock Service" || ((SYNTAX_ERRORS++))
test_syntax "apps/frontend/src/services/dataService.js" "Data Service" || ((SYNTAX_ERRORS++))
test_syntax "apps/frontend/src/hooks/useDataSource.js" "React Hooks" || ((SYNTAX_ERRORS++))
test_syntax "apps/frontend/src/utils/dataSourceManager.js" "Data Source Manager" || ((SYNTAX_ERRORS++))
test_syntax "apps/frontend/src/config/mockConfig.js" "Configuration" || ((SYNTAX_ERRORS++))

# Check import consistency
echo ""
echo "üì¶ Import Consistency Check:"
IMPORT_ISSUES=0

# Check for old mockData imports in components (should be 0)
OLD_IMPORTS=$(grep -r "import.*mockData" apps/frontend/src/components/ 2>/dev/null | wc -l)
if [ "$OLD_IMPORTS" -eq 0 ]; then
    echo "‚úÖ No old mockData imports in components"
else
    echo "‚ùå Found $OLD_IMPORTS old mockData imports in components"
    ((IMPORT_ISSUES++))
fi

# Check for new hook usage (should be > 0)
NEW_HOOKS=$(grep -r "useDataSource" apps/frontend/src/components/ 2>/dev/null | wc -l)
if [ "$NEW_HOOKS" -gt 0 ]; then
    echo "‚úÖ Components using new hooks: $NEW_HOOKS"
else
    echo "‚ùå No components using new hooks"
    ((IMPORT_ISSUES++))
fi

# Check store integration
STORE_MOCK_SERVICE=$(grep -c "mockService" apps/frontend/src/store/appStore.js 2>/dev/null || echo "0")
if [ "$STORE_MOCK_SERVICE" -gt 5 ]; then
    echo "‚úÖ Store properly integrated with mockService ($STORE_MOCK_SERVICE usages)"
else
    echo "‚ùå Store not properly integrated with mockService"
    ((IMPORT_ISSUES++))
fi

# Run validation test
echo ""
echo "üß™ Validation Test Results:"
./test_actual_separation.sh 2>/dev/null | tail -3

echo ""
echo "=========================================="
echo "üìä Final Assessment:"
echo "=========================================="

TOTAL_ISSUES=$((MISSING_FILES + SYNTAX_ERRORS + IMPORT_ISSUES))

if [ $TOTAL_ISSUES -eq 0 ]; then
    echo ""
    echo "üéâ STATUS: COMPLETE - NO REBUILD NEEDED"
    echo ""
    echo "‚úÖ All critical files present and valid"
    echo "‚úÖ No syntax errors detected"
    echo "‚úÖ Import patterns clean and consistent"
    echo "‚úÖ Components properly migrated"
    echo "‚úÖ Store integration complete"
    echo "‚úÖ Backend adapters implemented"
    echo "‚úÖ Documentation complete"
    echo ""
    echo "üöÄ SYSTEM IS READY FOR USE!"
    echo "The mock/real separation is complete and working."
    echo "You can run the application without rebuilding."
    echo ""
    exit 0
elif [ $TOTAL_ISSUES -le 2 ]; then
    echo ""
    echo "‚ö†Ô∏è STATUS: MINOR ISSUES - REBUILD OPTIONAL"
    echo ""
    echo "Found $TOTAL_ISSUES minor issues:"
    [ $MISSING_FILES -gt 0 ] && echo "‚Ä¢ Missing files: $MISSING_FILES"
    [ $SYNTAX_ERRORS -gt 0 ] && echo "‚Ä¢ Syntax errors: $SYNTAX_ERRORS"
    [ $IMPORT_ISSUES -gt 0 ] && echo "‚Ä¢ Import issues: $IMPORT_ISSUES"
    echo ""
    echo "üîß RECOMMENDATION: Fix these issues but rebuild not required"
    echo "The core functionality should work as implemented."
    echo ""
    exit 1
else
    echo ""
    echo "‚ùå STATUS: SIGNIFICANT ISSUES - REBUILD RECOMMENDED"
    echo ""
    echo "Found $TOTAL_ISSUES significant issues:"
    [ $MISSING_FILES -gt 0 ] && echo "‚Ä¢ Missing files: $MISSING_FILES"
    [ $SYNTAX_ERRORS -gt 0 ] && echo "‚Ä¢ Syntax errors: $SYNTAX_ERRORS"
    [ $IMPORT_ISSUES -gt 0 ] && echo "‚Ä¢ Import issues: $IMPORT_ISSUES"
    echo ""
    echo "üî® RECOMMENDATION: Consider rebuilding or fixing critical issues"
    echo "Some functionality may not work as expected."
    echo ""
    exit 2
fi

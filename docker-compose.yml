# AnalyticBot - Unified Docker Compose
# Development and local testing environment

services:
  # ---------- Database ----------
  db:
    image: postgres:16
    container_name: analyticbot-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-analytic_bot}
      POSTGRES_USER: ${POSTGRES_USER:-analytic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analytic} -d ${POSTGRES_DB:-analytic_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------- Redis ----------
  redis:
    image: redis:7-alpine
    container_name: analyticbot-redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------- MTProto Real Data Collection Service (Phase 2) ----------
  mtproto:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile
      target: api  # Reuse API image for now
    command: python scripts/mtproto_service.py service
    container_name: analyticbot-mtproto
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-analytic}:${POSTGRES_PASSWORD:-change_me}@db:5432/${POSTGRES_DB:-analytic_bot}
      REDIS_URL: redis://redis:6379/0
      # Phase 2 MTProto Real Data Collection - ENABLED
      MTPROTO_ENABLED: ${MTPROTO_ENABLED:-true}
      MTPROTO_HISTORY_ENABLED: ${MTPROTO_HISTORY_ENABLED:-true}
      MTPROTO_UPDATES_ENABLED: ${MTPROTO_UPDATES_ENABLED:-true}
      MTPROTO_STATS_ENABLED: ${MTPROTO_STATS_ENABLED:-true}
      # Telegram API credentials (required)
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_SESSION_NAME: ${TELEGRAM_SESSION_NAME:-analyticbot_session}
      # Collection settings with SAFE RATE LIMITING
      MTPROTO_PEERS: ${MTPROTO_PEERS:-}
      MTPROTO_HISTORY_LIMIT_PER_RUN: ${MTPROTO_HISTORY_LIMIT_PER_RUN:-50}  # Reduced for safety
      MTPROTO_CONCURRENCY: ${MTPROTO_CONCURRENCY:-1}  # Conservative for safety
      MTPROTO_SLEEP_THRESHOLD: ${MTPROTO_SLEEP_THRESHOLD:-2.0}  # Increased sleep
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    env_file: 
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - ./apps/mtproto:/app/apps/mtproto:ro
      - ./core:/app/core:ro
      - ./infra:/app/infra:ro
      - ./scripts:/app/scripts:ro
      - ./data:/app/data  # For session storage
    profiles:
      - mtproto  # Only start when explicitly requested
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; asyncio.run(__import__('scripts.mtproto_service').MTProtoServiceManager().get_status())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ---------- Frontend Service ----------
  frontend:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.frontend
      target: production
    container_name: analyticbot-frontend
    ports:
      - "3000:80"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_SENTRY_DSN: ${VITE_SENTRY_DSN:-}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # ---------- Frontend Development (optional) ----------
  frontend-dev:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.frontend
      target: development
    container_name: analyticbot-frontend-dev
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_SENTRY_DSN: ${VITE_SENTRY_DSN:-}
    volumes:
      - ./apps/frontend:/app:delegated
      - /app/node_modules
    depends_on:
      api:
        condition: service_healthy
    profiles:
      - dev
    restart: unless-stopped

  # ---------- API Service ----------
  api:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile
      target: api
    command: uvicorn apps.api.main:app --host 0.0.0.0 --port 8000
    container_name: analyticbot-api
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-analytic}:${POSTGRES_PASSWORD:-change_me}@db:5432/${POSTGRES_DB:-analytic_bot}
      REDIS_URL: redis://redis:6379/0
    env_file: 
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10
    volumes:
      - ./var/results:/app/results
    restart: unless-stopped

  # ---------- Bot Service ----------
  bot:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile
      target: bot
    command: python -m apps.bot.run_bot
    container_name: analyticbot-bot
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-analytic}:${POSTGRES_PASSWORD:-change_me}@db:5432/${POSTGRES_DB:-analytic_bot}
      REDIS_URL: redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # ---------- Celery Worker (optional) ----------
  worker:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile
      target: worker
    command: celery -A infra.celery.celery_app worker -l info
    container_name: analyticbot-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-analytic}:${POSTGRES_PASSWORD:-change_me}@db:5432/${POSTGRES_DB:-analytic_bot}
      REDIS_URL: redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - full

  # ---------- Celery Beat (optional) ----------
  beat:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile
      target: beat
    command: celery -A infra.celery.celery_app beat -l info
    container_name: analyticbot-beat
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-analytic}:${POSTGRES_PASSWORD:-change_me}@db:5432/${POSTGRES_DB:-analytic_bot}
      REDIS_URL: redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - full

volumes:
  pgdata:
    name: analyticbot_pgdata
  redisdata:
    name: analyticbot_redisdata

networks:
  default:
    name: analyticbot_network

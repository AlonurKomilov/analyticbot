name: CI Autodoctor

on:
  workflow_run:
    workflows: ["CI", "Compose Verify"]     # sizdagi ci.yml va compose-verify.yml nomlari
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  doctor:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download failed run logs
        id: logs
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const run_id = context.payload.workflow_run.id;
            const res = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs', {
              owner: context.repo.owner, repo: context.repo.repo, run_id
            });
            const b64 = Buffer.from(res.data).toString('base64');
            return b64;

      - name: Save & extract logs
        run: |
          mkdir -p tools/ci-autofix/_logs
          echo "${{ steps.logs.outputs.result }}" | base64 -d > tools/ci-autofix/_logs/failed-run.zip
          # Ba'zi runnerlar zip ichida ko'p fayl beradi; hammasini bitta faylga oqizamiz
          unzip -p tools/ci-autofix/_logs/failed-run.zip > tools/ci-autofix/_logs/all.log || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Run doctor
        id: doctor
        run: |
          python -m pip install --upgrade pip
          python - <<'PY'
          import re, pathlib, os, sys
          root = pathlib.Path(".")
          log = pathlib.Path("tools/ci-autofix/_logs/all.log")
          text = log.read_text(errors="ignore") if log.exists() else ""

          changed = False

          # 1) Poetry lock muammosi -> pip'ga o'tkazish (python-tests.yml ichida)
          if "pyproject.toml changed significantly since poetry.lock" in text:
            wf = root/".github/workflows/python-tests.yml"
            if wf.exists():
              s = wf.read_text()
              if "Install dependencies with Poetry" in s or "poetry install" in s:
                import re
                s2 = re.sub(
                  r"(?s)- name: .*poetry.*?(\n- name:|\Z)",
                  "- name: Install deps (pip)\n  run: |\n    python -m pip install -U pip\n    pip install -e .\n    pip install pytest pytest-asyncio coverage ruff mypy bandit alembic\n\\1",
                  s
                )
                if s2 != s:
                  wf.write_text(s2); changed = True

          # 2) Alembic/env.py E402 -> ruff noqa E402
          if "E402 Module level import not at top of file" in text:
            p = root/"alembic/env.py"
            if p.exists():
              t = p.read_text()
              if "from bot.database.models import metadata" in t and "ruff: noqa: E402" not in t:
                t = t.replace("from bot.database.models import metadata",
                              "# ruff: noqa: E402\nfrom bot.database.models import metadata")
                (root/"alembic/env.py").write_text(t); changed = True

          # 3) psql FATAL: role ... does not exist -> docker-compose'ga POSTGRES_USER/DB yaratish
          if "FATAL:  role" in text and "does not exist" in text:
            dc = root/"docker-compose.yml"
            if dc.exists():
              y = dc.read_text()
              if "POSTGRES_USER" not in y:
                y = y.replace("environment:", "environment:\n      - POSTGRES_USER=analytic\n      - POSTGRES_PASSWORD=analytic\n      - POSTGRES_DB=analytic_db", 1)
                dc.write_text(y); changed = True

          open("tools/ci-autofix/CHANGED.flag","w").write("1" if changed else "0")
          PY

      - name: Detect changes
        id: diff
        run: |
          if [ -f tools/ci-autofix/CHANGED.flag ] && [ "$(cat tools/ci-autofix/CHANGED.flag)" = "1" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create PR with fixes
        if: steps.diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "ci(autofix): apply automatic fix from CI Autodoctor"
          title: "ci(autofix): CI Autodoctor fix"
          body: |
            This PR was opened automatically by **CI Autodoctor** after a failed run.
            It applied one or more deterministic fixes (no AI) based on error patterns.
            Please review and merge.
          branch: auto/ci-fix-${{ github.run_id }}
          labels: autofix, ci, mypy:softfail
          add-paths: |
            .github/workflows/**
            docker-compose.yml
            alembic/env.py

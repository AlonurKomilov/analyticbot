name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches: [main, develop, "feature/**"]

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: analytic_bot
          POSTGRES_USER: analytic
          POSTGRES_PASSWORD: change_me
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U analytic -d analytic_bot" --health-interval=5s --health-timeout=3s --health-retries=30

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    env:
      COV_FAIL_UNDER: ${{ contains(join(github.event.pull_request.labels.*.name, ','), 'cov:50') && '50' || contains(join(github.event.pull_request.labels.*.name, ','), 'cov:27') && '27' || '70' }}
      POSTGRES_DB: analytic_bot
      POSTGRES_USER: analytic
      POSTGRES_PASSWORD: change_me
      DATABASE_URL: postgresql+asyncpg://analytic:change_me@localhost:5432/analytic_bot
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      STORAGE_CHANNEL_ID: ${{ secrets.STORAGE_CHANNEL_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml','**/requirements*.txt') }}

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -e .
          pip install pytest pytest-asyncio coverage ruff mypy bandit alembic
          pip install pip-audit

      - name: Mask secrets in logs
        run: |
          echo "::add-mask::${BOT_TOKEN}"
          echo "::add-mask::${STORAGE_CHANNEL_ID}"

      - name: Prepare runtime .env (for future docker / integration steps)
        run: |
          cat > .env <<'EOF'
          BOT_TOKEN=${BOT_TOKEN}
          STORAGE_CHANNEL_ID=${STORAGE_CHANNEL_ID}
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          POSTGRES_DB=${POSTGRES_DB}
          POSTGRES_PORT=5432
          DATABASE_URL=${DATABASE_URL}
          REDIS_URL=redis://localhost:6379/0
          TWA_HOST_URL=http://localhost:5173
          ENFORCE_PLAN_LIMITS=True
          EOF
          grep -E '^(BOT_TOKEN|STORAGE_CHANNEL_ID)=' .env | sed 's/=.*/=***MASKED***/'

      - name: Ruff (lint)
        run: ruff check . --fix

      - name: Security (Bandit)
        run: bandit -q -r bot || true

      - name: Dependency audit (pip-audit)
        run: pip-audit -r requirements.txt || true

      - name: MyPy (type-check)
        run: mypy .
        continue-on-error: ${{ contains(join(github.event.pull_request.labels.*.name, ','), 'mypy:softfail') }}

      - name: Wait for Postgres
        run: |
          for i in {1..60}; do
            pg_isready -h localhost -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" && break
            sleep 2
          done

      - name: Run migrations (Alembic)
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: alembic upgrade head

      - name: Tests (with coverage gate)
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=bot --cov-report=term-missing \
            --cov-fail-under=${{ env.COV_FAIL_UNDER }}

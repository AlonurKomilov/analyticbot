name: Run Python Tests and Checks

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install poetry

      - name: Cache Poetry virtualenvs
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies with Poetry
        run: poetry install --no-root --with dev

      - name: Lint Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      - name: Lint YAML
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: ".github/workflows docker-compose.yml"

      - name: Bandit security scan
        run: pipx run bandit -q -r .

      - name: Gitleaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-banner --redact --verbose

      - name: Lint SQL (sqlfluff)
        run: |
          pipx install sqlfluff
          sqlfluff lint postgres-init/*.sql --dialect postgres

      - name: Detect changed files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            deps:
              - 'requirements.txt'
              - 'pyproject.toml'
              - 'poetry.lock'
            code:
              - '**/*.py'
              - '!**/tests/**'
              - '!**/__init__.py'

      - name: Prepare .env for tests
        run: |
          if [ -f .env ]; then
            echo ".env already exists"
          elif [ -f .env.example ]; then
            cp .env.example .env
          else
            cat > .env <<'EOF'
      BOT_TOKEN=replace_me
      ADMIN_IDS=8034732332,1527638770
      DEFAULT_LOCALE=en
      STORAGE_CHANNEL_ID=12345
      POSTGRES_HOST=postgres
      POSTGRES_PORT=5432
      POSTGRES_USER=analytic
      POSTGRES_PASSWORD=change_me
      POSTGRES_DB=analytic_bot
      DATABASE_URL=postgresql://analytic:change_me@postgres:5432/analytic_bot
      REDIS_URL=redis://redis:6379/0
      API_HOST=0.0.0.0
      API_PORT=8000
      API_HOST_URL=http://localhost:8000
      TWA_HOST_URL=http://localhost
      ENFORCE_PLAN_LIMITS=True
      SENTRY_DSN=
      EOF
          fi
      - name: Run security check for vulnerabilities in dependencies
        run: poetry run pip-audit

      - name: Run static analysis with flake8
        run: poetry run flake8 .

      - name: Run type checking with mypy
        run: poetry run mypy --install-types --non-interactive .

      - name: Run import sorting check with isort
        run: poetry run isort --check .

      - name: Run formatting check with black
        run: poetry run black --check .

      - name: Run tests with pytest
        run: poetry run pytest

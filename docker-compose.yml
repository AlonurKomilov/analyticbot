services:
  postgres:
    image: postgres:16-alpine
    container_name: analyticbot-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-analytic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me}
      POSTGRES_DB: ${POSTGRES_DB:-analytic_bot}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analytic} -d ${POSTGRES_DB:-analytic_bot}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: analyticbot-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "6379:6379"

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: analyticbot-api
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: bot
    container_name: analyticbot-bot
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Bot polling rejimida ishlaydi
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery_worker
    container_name: analyticbot-celery_worker
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery_beat
    container_name: analyticbot-celery_beat
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  db_data:
# üè¢ PHASE 5.0: Production Docker Compose Configuration
# Enterprise-grade multi-service deployment

version: '3.8'

networks:
  analyticbot-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
  monitoring-network:
    driver: bridge
    internal: false

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

services:
  # ==========================================
  # Core Application Services
  # ==========================================

  # TWA Frontend Service
  frontend:
    build:
      context: ../../
      dockerfile: docker/Dockerfile
      target: frontend
    container_name: analyticbot-frontend-prod
    environment:
      - VITE_API_URL=${API_HOST_URL:-http://localhost/api}
      - VITE_SENTRY_DSN=${VITE_SENTRY_DSN:-}
    networks:
      - analyticbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
  
  postgres:
    image: postgres:15-alpine
    container_name: analyticbot-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-analyticbot}
      POSTGRES_USER: ${POSTGRES_USER:-analyticuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - analyticbot-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analyticuser} -d ${POSTGRES_DB:-analyticbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: analyticbot-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - analyticbot-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Main API Service
  api:
    build:
      context: ../../
      dockerfile: docker/Dockerfile
      target: api
    command: uvicorn apps.api.main:app --host 0.0.0.0 --port 8000
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-analyticuser}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-analyticbot}
      - REDIS_URL=redis://redis:6379/0
      - APP_ENV=production
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - analyticbot-network
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Bot Service
  bot:
    build:
      context: ../../
      dockerfile: docker/Dockerfile
      target: bot
    container_name: analyticbot-bot-prod
    command: python -m apps.bot.run_bot
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-analyticuser}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-analyticbot}
      - REDIS_URL=redis://redis:6379/0
      - BOT_TOKEN=${BOT_TOKEN}
      - APP_ENV=production
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - analyticbot-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ../../
      dockerfile: docker/Dockerfile
      target: worker
    command: celery -A infra.celery.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-analyticuser}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-analyticbot}
      - REDIS_URL=redis://redis:6379/0
      - APP_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - analyticbot-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ../../
      dockerfile: docker/Dockerfile
      target: beat
    container_name: analyticbot-celery-beat-prod
    command: celery -A infra.celery.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-analyticuser}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-analyticbot}
      - REDIS_URL=redis://redis:6379/0
      - APP_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - analyticbot-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped

  # ==========================================
  # Monitoring Services
  # ==========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: analyticbot-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - monitoring-network
      - analyticbot-network
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: analyticbot-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana:/etc/grafana/provisioning
    networks:
      - monitoring-network
    ports:
      - "3000:3000"
    restart: unless-stopped

  # Reverse Proxy / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: analyticbot-nginx-prod
    volumes:
      - ../nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl:/etc/nginx/ssl
    networks:
      - analyticbot-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    restart: unless-stopped

# Enhanced Makefile with Environment Variable Management
# Updated to include comprehensive health checks and environment management

# Environment configuration management
.PHONY: env-check env-template env-validate
env-check: ## Check required environment variables
	@echo "ÔøΩ Checking required environment variables..."
	@./scripts/check-env.sh

env-template: ## Generate .env template file
	@echo "ÔøΩ Creating .env template..."
	@./scripts/create-env-template.sh

env-validate: ## Validate current environment configuration
	@echo "‚úÖ Validating environment configuration..."
	@./scripts/validate-env.sh

# Enhanced health checks
.PHONY: health-check health-check-verbose health-check-api health-check-services
health-check: ## Run comprehensive health check for all services
	@echo "üè• Running comprehensive health check..."
	./scripts/health-check.sh

health-check-verbose: ## Run detailed health check with verbose output
	@echo "üè• Running detailed health check..."
	VERBOSE=true ./scripts/health-check.sh

health-check-api: ## Check API service health only
	@echo "üöÄ Checking API service health..."
	curl -f http://localhost:10400/health | jq '.' || echo "‚ùå API health check failed"

health-check-services: ## Check individual service health endpoints
	@echo "üîç Checking individual service health..."
	@echo "API Service:"
	@curl -s http://localhost:10400/health | jq '.status // "unreachable"' || echo "unreachable"
	@echo "Bot Service (if available):"
	@curl -s http://localhost:10400/bot/health | jq '.status // "unreachable"' || echo "unreachable"

# Docker deployment with environment variables
.PHONY: docker-deploy-dev docker-deploy-prod
docker-deploy-dev: env-check ## Deploy development environment
	@echo "üöÄ Deploying AnalyticBot development environment..."
	docker-compose -f docker/docker-compose.yml up -d

docker-deploy-prod: env-validate ## Deploy production environment
	@echo "üöÄ Deploying AnalyticBot production environment..."
	docker-compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml up -d

# Enhanced Docker operations
.PHONY: docker-health-status docker-service-logs docker-service-status
docker-health-status: ## Show health status of all Docker services
	@echo "üè• Docker Services Health Status:"
	@docker service ls --format "table {{.Name}}\t{{.Mode}}\t{{.Replicas}}\t{{.Image}}" 2>/dev/null || echo "No Docker swarm services running"
	@echo ""
	@echo "üê≥ Container Health Status:"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(healthy|unhealthy|starting)" || echo "No containers with health checks running"

docker-service-logs: ## View logs for a specific service (usage: make docker-service-logs SERVICE=api)
	@if [ -z "$(SERVICE)" ]; then echo "Usage: make docker-service-logs SERVICE=api"; exit 1; fi
	docker service logs -f analyticbot_$(SERVICE) 2>/dev/null || docker logs -f analyticbot-$(SERVICE) 2>/dev/null || echo "Service not found"

docker-service-status: ## Show detailed status for all services
	@echo "üìä Detailed Service Status:"
	@docker service ps analyticbot_api 2>/dev/null || echo "analyticbot_api: not running"
	@docker service ps analyticbot_bot 2>/dev/null || echo "analyticbot_bot: not running"
	@docker service ps analyticbot_worker 2>/dev/null || echo "analyticbot_worker: not running"

# Test and validation
.PHONY: test-health-endpoints test-docker-secrets validate-configuration
test-health-endpoints: ## Test all health endpoints
	@echo "üß™ Testing health endpoints..."
	@echo "Testing API health..."
	@curl -s -w "\nResponse time: %{time_total}s\n" http://localhost:10400/health || echo "Failed"
	@echo "Testing API performance metrics..."
	@curl -s http://localhost:10400/performance | jq '.api_performance.status // "failed"' || echo "Failed"

test-environment: ## Test environment configuration
	@echo "üß™ Testing environment configuration..."
	@./scripts/check-env.sh
	@echo "Testing environment variables..."
	@./scripts/validate-env.sh

validate-configuration: ## Validate all configuration files
	@echo "üîç Validating configuration files..."
	@echo "Checking main compose file..."
	@docker-compose -f docker/docker-compose.yml config >/dev/null && echo "‚úÖ Main compose valid" || echo "‚ùå Main compose invalid"
	@echo "Checking production compose file..."
	@docker-compose -f docker/docker-compose.prod.yml config >/dev/null && echo "‚úÖ Production compose valid" || echo "‚ùå Production compose invalid"
	@echo "Checking environment variables..."
	@./scripts/validate-env.sh && echo "‚úÖ Environment variables valid" || echo "‚ùå Environment variables invalid"
	@echo "Checking Dockerfile..."
	@docker build --dry-run -f docker/Dockerfile . >/dev/null 2>&1 && echo "‚úÖ Dockerfile valid" || echo "‚ùå Dockerfile invalid"

# Quick setup commands
.PHONY: setup-dev setup-prod
setup-dev: ## Complete development setup
	@echo "üöÄ Setting up development environment..."
	./scripts/check-env.sh
	docker-compose -f docker/docker-compose.yml up -d
	@echo "‚è≥ Waiting for services to start..."
	sleep 30
	./scripts/health-check.sh

setup-prod: ## Complete production setup
	@echo "üöÄ Setting up production environment..."
	./scripts/validate-env.sh
	docker-compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml up -d
	@echo "‚è≥ Waiting for services to start..."
	sleep 60
	./scripts/health-check.sh

# Help with enhanced categories
help: ## Show this help message with enhanced categories
	@echo "ü§ñ AnalyticBot Enhanced Docker Management"
	@echo "========================================"
	@echo ""
	@echo "ÔøΩ Environment Management:"
	@grep -E '^env-[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üè• Health Monitoring:"
	@grep -E '^health-check[a-zA-Z_-]*:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üöÄ Docker Deployment:"
	@grep -E '^docker-deploy[a-zA-Z_-]*:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üìä Docker Operations:"
	@grep -E '^docker-(health|service)[a-zA-Z_-]*:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üß™ Testing & Validation:"
	@grep -E '^(test|validate)[a-zA-Z_-]*:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "‚ö° Quick Setup:"
	@grep -E '^setup[a-zA-Z_-]*:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## '}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@echo ""

.DEFAULT_GOAL := help
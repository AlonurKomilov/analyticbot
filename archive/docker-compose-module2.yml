version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: analyticbot-postgres-test
    environment:
      POSTGRES_DB: analyticbot_test
      POSTGRES_USER: analyticbot
      POSTGRES_PASSWORD: testpass123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analyticbot -d analyticbot_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - analyticbot-test

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: analyticbot-redis-test
    command: redis-server --requirepass testredis123 --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - analyticbot-test

  # AnalyticBot API
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: analyticbot-api-test
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://analyticbot:testpass123@postgres:5432/analyticbot_test
      
      # Redis Configuration  
      REDIS_URL: redis://:testredis123@redis:6379/0
      
      # Application Configuration
      ENVIRONMENT: testing
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      CORS_ORIGINS: "*"
      
      # Bot Configuration (mock for testing)
      BOT_TOKEN: "test_token_for_module2"
      WEBHOOK_SECRET: "test_webhook_secret"
      
      # AI Configuration (mock for testing)
      OPENAI_API_KEY: "test_openai_key"
      
      # Security (test values)
      JWT_SECRET_KEY: "test_jwt_secret_key_for_module2_validation"
      ENCRYPTION_KEY: "test_encryption_key_12345"
      
    ports:
      - "8001:8000"  # Different port for testing
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - analyticbot-test
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # AnalyticBot Bot (optional for full testing)
  bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: analyticbot-bot-test
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://analyticbot:testpass123@postgres:5432/analyticbot_test
      
      # Redis Configuration
      REDIS_URL: redis://:testredis123@redis:6379/0
      
      # Application Configuration
      ENVIRONMENT: testing
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      
      # Bot Configuration (mock for testing)
      BOT_TOKEN: "test_token_for_module2"
      WEBHOOK_SECRET: "test_webhook_secret"
      
      # AI Configuration (mock for testing)  
      OPENAI_API_KEY: "test_openai_key"
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - analyticbot-test
    command: ["python", "-m", "bot.main"]
    profiles:
      - full-test  # Optional service, activate with --profile full-test

volumes:
  postgres_test_data:
    name: analyticbot-postgres-test-data
  redis_test_data:
    name: analyticbot-redis-test-data

networks:
  analyticbot-test:
    name: analyticbot-test-network
    driver: bridge

name: ü§ñ Smart Auto-Fixer (Enhanced)

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
  issue_comment:
    types: [created]
  schedule:
    # Run daily quality check at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to fix (default: current branch)'
        required: false
        default: ''
      fix_type:
        description: 'Type of fixes to apply'
        required: true
        type: choice
        options:
          - 'all'
          - 'formatting'
          - 'imports'
          - 'type-hints'
          - 'security'
          - 'performance'
        default: 'all'
      create_pr:
        description: 'Create PR with fixes'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: read

env:
  PYTHON_VERSION: "3.11"
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  POSTGRES_DB: analytic_bot
  POSTGRES_USER: analytic
  POSTGRES_PASSWORD: change_me
  DATABASE_URL: postgresql+asyncpg://analytic:change_me@localhost:5432/analytic_bot

jobs:
  # Determine if auto-fixing should run
  should-run:
    name: üîç Determine Auto-Fix Scope
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      fix_type: ${{ steps.check.outputs.fix_type }}
      target_branch: ${{ steps.check.outputs.target_branch }}
      create_pr: ${{ steps.check.outputs.create_pr }}
    steps:
      - name: Check if should run
        id: check
        run: |
          SHOULD_RUN="false"
          FIX_TYPE="all"
          TARGET_BRANCH=""
          CREATE_PR="true"
          
          # Check trigger conditions
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_RUN="true"
            FIX_TYPE="${{ github.event.inputs.fix_type }}"
            TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
            CREATE_PR="${{ github.event.inputs.create_pr }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            SHOULD_RUN="true"
            TARGET_BRANCH="main"
            CREATE_PR="true"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'ai-fix') }}" == "true" ]]; then
              SHOULD_RUN="true"
              CREATE_PR="false"
            fi
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            if [[ "${{ contains(github.event.comment.body, '/ai-fix') }}" == "true" ]] && [[ "${{ github.event.issue.pull_request }}" != "" ]]; then
              SHOULD_RUN="true"
              CREATE_PR="false"
            fi
          fi
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "fix_type=$FIX_TYPE" >> $GITHUB_OUTPUT
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "create_pr=$CREATE_PR" >> $GITHUB_OUTPUT

  # Main auto-fixing job
  auto-fix:
    name: üõ†Ô∏è Apply Auto-Fixes
    runs-on: ubuntu-latest
    needs: should-run
    if: needs.should-run.outputs.should_run == 'true'
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: analytic_bot
          POSTGRES_USER: analytic
          POSTGRES_PASSWORD: change_me
        ports: 
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U analytic -d analytic_bot"
          --health-interval=5s 
          --health-timeout=3s 
          --health-retries=30

      redis:
        image: redis:7-alpine
        ports:
          - "6379:6379"
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

    steps:
      - name: Authorize commenter (for comment trigger)
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const login = context.payload.comment.user.login;
            const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner, 
              repo: context.repo.repo, 
              username: login
            });
            if (!['admin','maintain','write'].includes(data.permission)) {
              core.setFailed(`@${login} lacks write permission: ${data.permission}`);
            }

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-autofix-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-autofix-
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff mypy pytest coverage diff-cover alembic bandit safety
          pip install isort black autoflake pyupgrade
          pip install anthropic python-dotenv

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..60}; do 
            pg_isready -h localhost -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" && break
            sleep 2
          done
          
          echo "Waiting for Redis..."
          for i in {1..30}; do 
            redis-cli -h localhost -p 6379 ping && break
            sleep 1
          done

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          if [ -f "alembic.ini" ] || [ -d "alembic" ]; then
            echo "Running Alembic migrations..."
            alembic upgrade head || echo "Migration failed, continuing..."
          fi

      - name: 1Ô∏è‚É£ Code Formatting Fixes
        if: needs.should-run.outputs.fix_type == 'all' || needs.should-run.outputs.fix_type == 'formatting'
        run: |
          echo "üé® Applying code formatting fixes..."
          
          # Remove unused imports and variables
          autoflake --remove-all-unused-imports --remove-unused-variables --in-place --recursive . || true
          
          # Fix Python syntax to newer versions
          find . -name "*.py" -not -path "./venv/*" -not -path "./.git/*" -exec pyupgrade --py311-plus {} \; || true
          
          # Sort imports
          isort . --profile black || true
          
          # Format code with Black
          black . || true
          
          # Format with Ruff
          ruff format . || true
          
          echo "‚úÖ Code formatting completed"

      - name: 2Ô∏è‚É£ Import and Structure Fixes
        if: needs.should-run.outputs.fix_type == 'all' || needs.should-run.outputs.fix_type == 'imports'
        run: |
          echo "üì¶ Applying import and structure fixes..."
          
          # Fix import organization
          ruff check --select I --fix . || true
          
          # Fix common code issues
          ruff check --fix . || true
          
          echo "‚úÖ Import fixes completed"

      - name: 3Ô∏è‚É£ Type Hint Enhancements
        if: needs.should-run.outputs.fix_type == 'all' || needs.should-run.outputs.fix_type == 'type-hints'
        run: |
          echo "üè∑Ô∏è Enhancing type hints..."
          
          # Run mypy and collect issues
          git fetch origin main >/dev/null 2>&1 || true
          CHANGED_FILES=$(git diff --name-only --diff-filter=AMR origin/main... | grep -E '\.py$' || echo "")
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Checking type hints for changed files: $CHANGED_FILES"
            mypy $CHANGED_FILES --ignore-missing-imports --no-error-summary || true
          else
            echo "No Python files changed, running mypy on key modules..."
            mypy bot/ --ignore-missing-imports --no-error-summary || true
          fi
          
          echo "‚úÖ Type hint check completed"

      - name: 4Ô∏è‚É£ Security Fixes
        if: needs.should-run.outputs.fix_type == 'all' || needs.should-run.outputs.fix_type == 'security'
        run: |
          echo "üîí Applying security fixes..."
          
          # Run Bandit security linter
          bandit -r . -f json -o bandit-report.json || true
          
          # Check for security issues in dependencies
          safety check --json --output safety-report.json || true
          
          # Apply Ruff security fixes
          ruff check --select S --fix . || true
          
          echo "‚úÖ Security fixes completed"

      - name: 5Ô∏è‚É£ Performance Optimizations
        if: needs.should-run.outputs.fix_type == 'all' || needs.should-run.outputs.fix_type == 'performance'
        run: |
          echo "‚ö° Applying performance optimizations..."
          
          # Apply performance-related fixes
          ruff check --select PERF --fix . || true
          
          # Check for common performance issues
          ruff check --select UP --fix . || true  # pyupgrade rules
          
          echo "‚úÖ Performance optimizations completed"

      - name: 6Ô∏è‚É£ Run Tests and Quality Checks
        id: quality_check
        continue-on-error: true
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: redis://localhost:6379
        run: |
          echo "üß™ Running quality checks..."
          
          set +e  # Don't exit on error
          
          # Run tests
          echo "Running tests..."
          pytest -q --maxfail=5 --disable-warnings | tee test_results.txt
          TEST_EXIT=$?
          
          # Generate coverage report
          echo "Generating coverage report..."
          coverage xml || true
          
          # Check coverage for changed files
          git fetch origin main >/dev/null 2>&1 || true
          diff-cover coverage.xml --compare-branch origin/main --fail-under=70 | tee coverage_results.txt || true
          
          # Final formatting pass
          ruff format . || true
          
          echo "tests_passed=$([ $TEST_EXIT -eq 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "‚úÖ Quality checks completed (exit code: $TEST_EXIT)"
          
          set -e

      - name: 7Ô∏è‚É£ AI-Powered Fixes (if available)
        if: env.ANTHROPIC_API_KEY != '' && steps.quality_check.outputs.tests_passed == 'false'
        continue-on-error: true
        run: |
          echo "ü§ñ Applying AI-powered fixes..."
          
          # Create context for AI
          cat > ai_context.txt << 'EOF'
          Please analyze the following code issues and provide fixes:
          
          === TEST RESULTS ===
          EOF
          
          cat test_results.txt >> ai_context.txt || true
          
          echo -e "\n=== COVERAGE RESULTS ===" >> ai_context.txt
          cat coverage_results.txt >> ai_context.txt || true
          
          echo -e "\n=== CURRENT DIFF ===" >> ai_context.txt
          git diff origin/main... >> ai_context.txt || true
          
          # Call AI fixing script if it exists
          if [ -f "scripts/ai_fix.py" ]; then
            python scripts/ai_fix.py --context ai_context.txt --apply || echo "AI fix script failed, continuing..."
          else
            echo "AI fix script not found, skipping AI fixes"
          fi
          
          echo "‚úÖ AI fixes attempted"

      - name: 8Ô∏è‚É£ Final Cleanup and Validation
        run: |
          echo "üßπ Final cleanup and validation..."
          
          # Final formatting pass
          ruff format . || true
          ruff check --fix . || true
          
          # Remove any generated cache files
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          
          echo "‚úÖ Cleanup completed"

      - name: Check if changes were made
        id: changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes made by auto-fixer"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --stat
          fi

      - name: Commit changes (for PR)
        if: steps.changes.outputs.has_changes == 'true' && needs.should-run.outputs.create_pr == 'false'
        run: |
          echo "üíæ Committing changes to current branch..."
          git config user.name "auto-fixer[bot]"
          git config user.email "auto-fixer-bot@users.noreply.github.com"
          git add -A
          git commit -m "ü§ñ Auto-fix: Apply code quality improvements

          Applied fixes:
          - Code formatting (ruff, black, isort)
          - Import organization
          - Security improvements
          - Performance optimizations
          - Type hint enhancements
          
          Fix type: ${{ needs.should-run.outputs.fix_type }}
          Triggered by: ${{ github.event_name }}"
          git push

      - name: Create PR with fixes (for scheduled/manual runs)
        if: steps.changes.outputs.has_changes == 'true' && needs.should-run.outputs.create_pr == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = `auto-fix-${new Date().toISOString().slice(0,10)}-${Math.random().toString(36).substr(2, 9)}`;
            const baseBranch = '${{ needs.should-run.outputs.target_branch }}' || 'main';
            
            // Create and push new branch
            await exec.exec('git', ['checkout', '-b', branchName]);
            await exec.exec('git', ['config', 'user.name', 'auto-fixer[bot]']);
            await exec.exec('git', ['config', 'user.email', 'auto-fixer-bot@users.noreply.github.com']);
            await exec.exec('git', ['add', '-A']);
            await exec.exec('git', ['commit', '-m', `ü§ñ Auto-fix: Apply code quality improvements
            
            Applied fixes:
            - Code formatting (ruff, black, isort)
            - Import organization  
            - Security improvements
            - Performance optimizations
            - Type hint enhancements
            
            Fix type: ${{ needs.should-run.outputs.fix_type }}
            Triggered by: ${{ github.event_name }}`]);
            await exec.exec('git', ['push', 'origin', branchName]);
            
            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ü§ñ Auto-fix: Code quality improvements',
              head: branchName,
              base: baseBranch,
              body: `## ü§ñ Automated Code Quality Improvements

              This PR contains automated fixes applied by the Smart Auto-Fixer.

              ### üîß Applied Fixes
              - ‚úÖ Code formatting (ruff, black, isort)
              - ‚úÖ Import organization and optimization
              - ‚úÖ Security improvements and vulnerability fixes
              - ‚úÖ Performance optimizations
              - ‚úÖ Type hint enhancements

              ### üìä Fix Details
              - **Fix Type**: \`${{ needs.should-run.outputs.fix_type }}\`
              - **Triggered By**: ${{ github.event_name }}
              - **Branch**: \`${baseBranch}\`

              ### üß™ Quality Checks
              - **Tests Passed**: ${{ steps.quality_check.outputs.tests_passed }}
              - **Coverage**: Check diff coverage report
              - **Security**: Bandit and Safety checks run

              ### üöÄ Next Steps
              1. Review the changes carefully
              2. Run additional tests if needed
              3. Merge if all checks pass

              ---
              *This PR was created automatically by the Smart Auto-Fixer workflow*`
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['auto-fix', 'enhancement', 'automated']
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);

      - name: Comment on PR/Issue
        if: github.event_name == 'pull_request' || github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.eventName === 'issue_comment' 
              ? context.payload.issue.number 
              : context.payload.pull_request.number;
              
            const hasChanges = '${{ steps.changes.outputs.has_changes }}' === 'true';
            const testsPass = '${{ steps.quality_check.outputs.tests_passed }}' === 'true';
            
            let body = `## ü§ñ Auto-Fixer Results\n\n`;
            
            if (hasChanges) {
              body += `‚úÖ **Applied automatic fixes:**\n`;
              body += `- Code formatting and style improvements\n`;
              body += `- Import organization\n`;
              body += `- Security enhancements\n`;
              body += `- Performance optimizations\n\n`;
            } else {
              body += `‚ÑπÔ∏è **No automatic fixes needed** - code is already in good shape!\n\n`;
            }
            
            body += `### üìä Quality Metrics\n`;
            body += `- **Tests**: ${testsPass ? '‚úÖ Passing' : '‚ùå Some failures'}\n`;
            body += `- **Fix Type**: \`${{ needs.should-run.outputs.fix_type }}\`\n`;
            body += `- **Changes Made**: ${hasChanges ? 'Yes' : 'No'}\n\n`;
            
            if (!testsPass) {
              body += `‚ö†Ô∏è **Note**: Some tests are still failing. You may need to review and fix manually.\n\n`;
            }
            
            body += `*Run \`/ai-fix\` to trigger fixes again*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: body
            });

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-fix-reports
          path: |
            test_results.txt
            coverage_results.txt
            bandit-report.json
            safety-report.json
            coverage.xml
          retention-days: 7

  # Summary job
  summary:
    name: üìã Auto-Fix Summary
    runs-on: ubuntu-latest
    needs: [should-run, auto-fix]
    if: always() && needs.should-run.outputs.should_run == 'true'
    steps:
      - name: Summary
        run: |
          echo "## ü§ñ Smart Auto-Fixer Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fix Type**: ${{ needs.should-run.outputs.fix_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Result**: ${{ needs.auto-fix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.auto-fix.result }}" = "success" ]; then
            echo "‚úÖ Auto-fixes applied successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Auto-fix process encountered issues" >> $GITHUB_STEP_SUMMARY
          fi

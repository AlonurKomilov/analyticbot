# Frontend Dockerfile for AnalyticBot
# Multi-stage build for optimized production image with enhanced performance

# ---------- Base (dependencies) ----------
FROM node:20-alpine AS base
WORKDIR /app

# Set environment to reduce warnings
ENV DEBIAN_FRONTEND=noninteractive
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false

# Install dependencies for building native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Copy package files
COPY apps/frontend/package*.json ./
RUN npm ci --omit=dev --no-optional && npm cache clean --force

# ---------- Development ----------
FROM node:20-alpine AS development
WORKDIR /app

# Set environment to reduce warnings
ENV DEBIAN_FRONTEND=noninteractive
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false

# Install dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Copy package files
COPY apps/frontend/package*.json ./
RUN npm ci --no-optional

# Copy source code
COPY apps/frontend/ ./

# Expose port for development server
EXPOSE 5173

# Set environment variables for development
ENV NODE_ENV=development
ENV VITE_PORT=5173

# Health check for development
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:5173 || exit 1

# Start development server
CMD ["npm", "run", "dev"]

# ---------- Build ----------
FROM node:20-alpine AS builder
WORKDIR /app

# Set environment to reduce warnings
ENV DEBIAN_FRONTEND=noninteractive
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false

# Install dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Copy package files and install all dependencies
COPY apps/frontend/package*.json ./
RUN npm ci --no-optional

# Copy source code
COPY apps/frontend/ ./

# Build the application
RUN npm run build

# ---------- Production ----------
FROM nginx:alpine AS production
LABEL maintainer="AnalyticBot Team"
LABEL description="AnalyticBot Frontend - Production Ready"

# Set environment to reduce warnings
ENV DEBIAN_FRONTEND=noninteractive

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY infra/docker/nginx.conf /etc/nginx/nginx.conf
COPY infra/docker/default.conf /etc/nginx/conf.d/default.conf

# Create nginx cache directory
RUN mkdir -p /var/cache/nginx/client_temp \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /usr/share/nginx/html

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
